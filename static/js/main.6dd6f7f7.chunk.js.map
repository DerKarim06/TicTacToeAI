{"version":3,"sources":["components/Board.js","implementation/AI.js","implementation/Game.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","state","squares","game","on","setState","board","player","update","this","pos","id","disabled","className","map","key","onClick","handleSquareClick","Component","AI","minPlayer","maxPlayer","bestMove","Infinity","move","i","length","newBoard","nextMove","minimize","isWinner","isTie","maximize","slice","some","x","Game","ai","init","scores","setup","emit","msg","aiPos","search","EventEmitter","App","1","2","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6dd6f7f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Board extends Component {\r\n  static propTypes = {\r\n    game: PropTypes.object.isRequired,\r\n    disabled: PropTypes.bool.isRequired,\r\n  };\r\n\r\n  state = {\r\n    squares: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.game.on(\"moved\", (game) => {\r\n      this.setState({ squares: game.board });\r\n      if (props.game.player === 1) props.game.update({ player: 2 });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ squares: this.props.game.board });\r\n  }\r\n\r\n  // handles the click on one square\r\n  handleSquareClick(pos, id) {\r\n    if (this.props.disabled) return;\r\n    if (pos !== 0) return;\r\n\r\n    this.props.game.update({ pos: id, player: 1 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        {this.state.squares.map((pos, id) => (\r\n          <div\r\n            key={id}\r\n            onClick={() => this.handleSquareClick(pos, id)}\r\n            className=\"board-square\"\r\n          >\r\n            {pos === 0 ? (\r\n              \"\"\r\n            ) : pos === 1 ? (\r\n              <h1 className=\"pick\">X</h1>\r\n            ) : (\r\n              <h1 className=\"pick\">O</h1>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","class AI {\r\n  minPlayer = 1;  // minimizing player\r\n  maxPlayer = 2;  // maximizing player\r\n\r\n\r\n  // starts with maximizing\r\n  search(board) {\r\n    let bestMove = -Infinity;\r\n    let move = 0;\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n      let newBoard = this.move(i, this.maxPlayer, board);\r\n      if (newBoard) {\r\n        let nextMove = this.minimize(newBoard);\r\n        if (nextMove > bestMove) {\r\n          bestMove = nextMove;\r\n          move = i;\r\n        }\r\n      }\r\n    }\r\n    return move;\r\n  }\r\n\r\n  minimize(board) {\r\n    if (this.isWinner(this.maxPlayer, board)) return Infinity;\r\n    if (this.isWinner(this.minPlayer, board)) return -Infinity;\r\n    if (this.isTie(board)) return 0;\r\n\r\n    let bestMove = Infinity;\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n      let newBoard = this.move(i, this.minPlayer, board);\r\n      if (newBoard) {\r\n        let nextMove = this.maximize(newBoard);\r\n        if (nextMove < bestMove) {\r\n          bestMove = nextMove;\r\n        }\r\n      }\r\n    }\r\n    return bestMove;\r\n  }\r\n\r\n  maximize(board) {\r\n    if (this.isWinner(this.maxPlayer, board)) return Infinity;\r\n    if (this.isWinner(this.minPlayer, board)) return -Infinity;\r\n    if (this.isTie(board)) return 0;\r\n\r\n    let bestMove = -Infinity;\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n      let newBoard = this.move(i, this.maxPlayer, board);\r\n      if (newBoard) {\r\n        let nextMove = this.minimize(newBoard);\r\n        if (nextMove > bestMove) {\r\n          bestMove = nextMove;\r\n        }\r\n      }\r\n    }\r\n    return bestMove;\r\n  }\r\n\r\n  // makes move in an new board to go deeper\r\n  move(move, player, board) {\r\n    let newBoard = board.slice(0);\r\n\r\n    if (newBoard[move] === 0) {\r\n      newBoard[move] = player;\r\n      return newBoard;\r\n    }\r\n    return;\r\n  }\r\n\r\n  //checks if 3 equal signs are in a row\r\n  isWinner(player, board) {\r\n    return (\r\n      (board[0] === player && board[1] === player && board[2] === player) ||\r\n      (board[3] === player && board[4] === player && board[5] === player) ||\r\n      (board[6] === player && board[7] === player && board[8] === player) ||\r\n      (board[0] === player && board[3] === player && board[6] === player) ||\r\n      (board[1] === player && board[4] === player && board[7] === player) ||\r\n      (board[2] === player && board[5] === player && board[8] === player) ||\r\n      (board[0] === player && board[4] === player && board[8] === player) ||\r\n      (board[2] === player && board[4] === player && board[6] === player)\r\n    );\r\n  }\r\n  // cehcks if the board is full and there is no winner\r\n  isTie(board) {\r\n    return !board.some((x) => x === 0);\r\n  }\r\n}\r\n\r\nexport default AI;\r\n","import { EventEmitter } from \"events\";\r\nimport AI from \"./AI\";\r\n\r\nclass Game extends EventEmitter {\r\n  ai = new AI();\r\n  board = this.init();\r\n  scores = [0, 0];\r\n  player = 0;\r\n\r\n  // returns an empty board\r\n  setup() {\r\n    return [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  }\r\n\r\n  init() {\r\n    this.board = this.setup();\r\n    this.emit(\"moved\", { board: this.board });\r\n  }\r\n\r\n  update(msg) {\r\n    this.player = msg.player;\r\n\r\n    if (msg.pos) {\r\n      this.board[msg.pos] = msg.player;\r\n    } else {\r\n      const aiPos = this.ai.search(this.board);\r\n      this.board[aiPos] = msg.player;\r\n    }\r\n\r\n    if (this.ai.isWinner(msg.player, this.board)) {\r\n      this.scores[msg.player - 1] += 1;\r\n      return this.emit(\"won\", { player: msg.player, scores: this.scores });\r\n    }\r\n\r\n    if (this.ai.isTie(this.board)) {\r\n      this.scores[0] += 1;\r\n      this.scores[1] += 1;\r\n      return this.emit(\"tie\", { player: msg.player, scores: this.scores });\r\n    }\r\n\r\n    this.emit(\"moved\", { board: this.board });\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport Board from \"./components/Board\";\nimport Game from \"./implementation/Game\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  game = new Game();\n  state = {\n    1: \"\",\n    2: \"\",\n    scores: [0, 0],\n  };\n\n  constructor() {\n    super();\n    this.game.on(\"moved\", (msg) => this.setState({ 1: \"\", 2: \"\" }));\n    this.game.on(\"won\", (msg) =>\n      this.setState({ [msg.player]: \"WON\", scores: msg.scores })\n    );\n    this.game.on(\"tie\", (msg) =>\n      this.setState({ [msg.player]: \"TIE\", scores: msg.scores })\n    );\n  }\n\n  componentDidMount() {\n    this.game.init();\n  }\n\n  render() {\n    const disabled = !(this.state[1] === \"\" && this.state[2] === \"\");\n    return (\n      <div className=\"container\">\n        <div className=\"headline\">\n          <span>Unbeatable AI</span>\n        </div>\n        <div className=\"score\">\n          <span>Player</span>\n          <span>\n            {this.state.scores[0]} : {this.state.scores[1]}\n          </span>\n          <span>AI</span>\n        </div>\n        <div className=\"status\">\n          <span>{this.state[1]}</span>\n          <span>\n            <button className=\"btn\" onClick={() => this.game.init()}>\n              Restart\n            </button>\n          </span>\n          <span>{this.state[2]}</span>\n        </div>\n        <Board game={this.game} disabled={disabled} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}